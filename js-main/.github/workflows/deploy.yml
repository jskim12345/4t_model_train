name: Deploy MLflow to EC2

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    name: Deploy and Run MLflow on EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Start EC2 Instance
        env:
          AWS_REGION: ap-northeast-2
          INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
        run: |
          aws ec2 start-instances --instance-ids $INSTANCE_ID --region $AWS_REGION

      - name: Create PEM file from secret
        env:
          PEM_KEY: ${{ secrets.EC2_PEM_KEY }}
        run: |
          echo "${PEM_KEY}" > mykey.pem
          chmod 400 mykey.pem

      - name: Compress files for transfer
        run: |
           tar -czvf mlflow_gkt_test1.tar.gz --exclude='./.git' --exclude='./.github' --exclude='./__pycache__' *

      - name: Transfer compressed file to EC2
        env:
          EC2_USER: ubuntu
          EC2_HOST: 43.203.12.181
        run: |
          scp -o StrictHostKeyChecking=no -i mykey.pem mlflow_gkt_test1.tar.gz $EC2_USER@$EC2_HOST:/home/ubuntu/

      - name: Install Dependencies and Run MLflow on EC2
        env:
          EC2_USER: ubuntu
          EC2_HOST: 43.203.12.181
        run: |
          ssh -o StrictHostKeyChecking=no -i mykey.pem $EC2_USER@$EC2_HOST << 'EOF'
            cd /home/ubuntu
            # 압축 해제
            tar -xzvf mlflow_gkt_test1.tar.gz
            # 필요 시 압축 파일 삭제
            rm mlflow_gkt_test1.tar.gz
            # 필요한 라이브러리 설치
            cd mlflow_gkt_test1
            # 포트 5000의 기존 프로세스 정리
            fuser -k 5000/tcp || true
            sleep 2
            # MLflow 서버 시작 (백그라운드에서 실행)
            nohup mlflow server --backend-store-uri sqlite:///mlflow.db --default-artifact-root s3://jstest-4t/mlflow --host 0.0.0.0 --port 5000 &
            # train_2.py 실행
            python3 af_dfm_train.py
            python3 bf_dfm_train.py
            # python3 train_2.py
            
          EOF